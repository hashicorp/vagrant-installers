#!/usr/bin/env bash

# This script will build an arch linux package.

# Load CI helpers
csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/../" && pwd )"

. "${root}/.ci/load-ci.sh"

install_file="${1}"
output_dir="${2}"
version="${3}"

if [ -z "${install_file}" ]; then
    failure "Install file artifact is required"
fi

if [ ! -f "${install_file}" ]; then
    failure "Install file artifact path provided is not a file (%s)" "${install_file}"
fi

install_file="$(realpath "${install_file}")" ||
    failure "Could not determine full path of install file artifact"

if [ -z "${output_dir}" ]; then
    failure "Output directory path is required"
fi

mkdir -p "${output_dir}" ||
    failure "Invalid output directory path provided: %s" "${output_dir}"
pushd "${output_dir}"
output_dir="$(pwd)" ||
    failure "Could not read full path of output directory"
popd

if [ -z "${version}" ]; then
    failure "Vagrant version is required"
fi

# Name for the arch linux container
ctn_name="archlinux"
# Name for the project (root directory will be mounted using this)
proj_name="${root##*/}"

debug "setting up archlinux"
"${root}/.ci/helpers/archlinux-setup" "${ctn_name}" ||
    failure "Failed to setup archlinux"

# Set names for where the output should end up
o_dirname="generated-output"
o_fullpath="${root}/${o_dirname}"
# NOTE: $root is mounted as /$proj_name via setup script
o_ctnpath="/tmp/${o_dirname}"

# Place install file artifact in known location
mkdir -p "${root}/install-file" ||
    failure "Could not create directory holder for install file"
cp "${install_file}" "${root}/install-file" ||
    failure "Could not copy install file into directory holder"

debug "starting package build"
lxc exec "${ctn_name}" -- "/${proj_name}/package/build-archlinux" \
    "/${proj_name}/install-file/${install_file##*/}" \
    "${o_ctnpath}" \
    "${version}" ||
    failure "Failed to build the arch linux substrate"

debug "extracting substrate artifact from container"
lxc file pull --recursive "${ctn_name}${o_ctnpath}" "${root}" ||
    failure "Unable to extract substrate artifact from container"

# Stop the container
# NOTE: We don't error since we don't really
#       care if it stops or not
debug "stopping the archlinux container"
lxc stop "${ctn_name}"

contents=( "${o_fullpath}"/* )
debug "output of package build: ${contents[*]}"

# Move package to destination directory
mv "${o_fullpath}/"* "${output_dir}/" ||
    failure "Unable to move substrate artifacts to output directory"

contents=( "${output_dir}/"* )
printf "Package artifact build complete: %s\n" "${contents[*]}"
