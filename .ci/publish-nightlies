#!/usr/bin/env bash

csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/../" && pwd )"

. "${root}/.ci/load-ci.sh"
pushd "${root}"

# Output to stdout if we aren't on a runner
if [ -z "${GITHUB_OUTPUT}" ]; then
    GITHUB_OUTPUT="/dev/stdout"
fi

if [ "${#}" -ne 3 ]; then
    printf "Usage: %s RELEASE_NAME COMMITISH ARTIFACT_DIR\n" "${0}" >&2
    exit 1
fi

release_name="${1}"
commitish="${2}"
pkg_dir="${3}"

if [ -z "${release_name}" ]; then
    failure "Nightly release name required"
fi
if [ -z "${commitish}" ]; then
    failure "Nightly release requires commitish value"
fi
if [ -z "${pkg_dir}" ]; then
    failure "Package directory required for nightly release"
fi

# Resolve the path
pushd "${pkg_dir}"
pkg_dir="$(pwd)" ||
    failure "Invalid package directory provided (%s)" "${pkg_dir}"
popd

if github_release_exists "vagrant" "${release_name}"; then
    warn "Vagrant release (%s) already exists, removing..." "${release_name}"
    github_delete_release "${release_name}" "vagrant"
fi

# Create the release
debug "creating nightly vagrant release - %s" "${release_name}"
release_output="$(github_create_release -o "${repo_owner}" -r "vagrant" -n "${release_name}" -t "${release_name}" -c "${commitish}" -b "Vagrant nightly release build" -p -m)" ||
    failure "Could not create GitHub prerelease"
debug "new release created: %s" "${release_output}"
release_id="$(printf "%s" "${release_output}" | jq -r '.id')" ||
    failure "Could not get release ID from release creation response"

# Upload artifacts for the release
debug "uploading artifacts for vagrant release '%s' (ID: %d)" "${release_name}" "${release_id}"
github_upload_release_artifacts "vagrant" "${release_id}" "${pkg_dir}"
