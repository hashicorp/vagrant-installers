#!/usr/bin/env bash

csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/../" && pwd )"

. "${root}/.ci/load-ci.sh"
pushd "${root}"

# Output to stdout if we aren't on a runner
if [ -z "${GITHUB_OUTPUT}" ]; then
    GITHUB_OUTPUT="/dev/stdout"
fi

if [ "${#}" -ne 3 ]; then
    printf "Usage: %s VERSION VAGRANT_COMMIT RUN_NUMBER\n" "${0}" >&2
    exit 1
fi

version="${1}"
sha="${2}"
run_number="${3}"

if [ -z "${version}" ]; then
    failure "Vagrant version is required"
fi
if [ -z "${sha}" ]; then
    failure "Vagrant commit ID is required"
fi
if [ -z "${run_number}" ]; then
    failure "Run number is required"
fi

run_number="$(printf "%06d" "${run_number}")"

# Create the name for the dev build release
release_name="${version}+${run_number}-${sha:0:8}"
debug "release name: %s" "${release_name}"

# Create the output for the release name
printf "release-name=%s\n" "${release_name}" >> "${GITHUB_OUTPUT}"

fuzzy_name="${version}+.*-${sha:0:8}"

# Check if the nightly already exists
if github_release_exists_fuzzy "vagrant" "${fuzzy_name}"; then
    debug "nightly release '%s' already exists" "${release_name}"
    printf "release-exists=true\n" >> "${GITHUB_OUTPUT}"
fi
