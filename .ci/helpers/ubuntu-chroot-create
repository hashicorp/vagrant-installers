#!/usr/bin/env bash

# This script should not be called directly. It handles
# doing the internal creation of the ubuntu chroot.

# Load CI helpers
csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/../../" && pwd )"

. "${root}/.ci/load-ci.sh"

if [ "$(id -u)" != "0" ]; then
    failure "Script must be run as root"
fi

substrate_arch="${1?Chroot architecture required}"
chroot_dir="${2?Path to chroot is required}"
mkdir -p "${chroot_dir}" || exit
pushd "${chroot_dir}"
chroot_dir="$(pwd)" || exit
popd

debug "created chroot directory - %s" "${chroot_dir}"

apt-get update -qy || failure "could not update apt"

# Install required packages for chroot setup
apt-get install -qy debootstrap ||
    failure "could not install required packages"

# Use debootstrap to create the environment
debug "creating trusty chroot"
if [ "${substrate_arch}" = "32" ]; then
    debug "creating 32 bit ubuntu chroot"
    bootstrap_args=( "--arch" "i386" )
else
    debug "creating 64 bit ubuntu chroot"
    bootstrap_args=()
fi
bootstrap_args+=(
    "--include"
    "apt-transport-https,ca-certificates"
    "trusty"
    "/var/chroot"
    "http://archive.ubuntu.com/ubuntu/"
)
debootstrap "${bootstrap_args[@]}" ||
    failure "failed to create trusty chroot"

# Write a new apt sources.list file to include all the things
debug "writing new apt sources.list"

cat <<EOF> /var/chroot/etc/apt/sources.list
deb http://us.archive.ubuntu.com/ubuntu/ trusty main restricted
deb http://us.archive.ubuntu.com/ubuntu/ trusty-updates main restricted
deb http://us.archive.ubuntu.com/ubuntu/ trusty universe
deb http://us.archive.ubuntu.com/ubuntu/ trusty-updates universe
deb http://us.archive.ubuntu.com/ubuntu/ trusty multiverse
deb http://us.archive.ubuntu.com/ubuntu/ trusty-updates multiverse
deb http://us.archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse
deb http://security.ubuntu.com/ubuntu trusty-security main restricted
deb http://security.ubuntu.com/ubuntu trusty-security universe
deb http://security.ubuntu.com/ubuntu trusty-security multiverse
EOF

# Add a mount point for ourselves so the project is accessible
debug "mounting project directory into chroot - %s" "${root}"
project_name="${root##*/}"
mount_dir="${chroot_dir}/${project_name}"
printf "%s %s none rbind 0 0\n" "${root}" "${mount_dir}" >> /etc/fstab ||
    failure "Could not update local fstab file"
mkdir -p "${mount_dir}" ||
    failure "Could not create mount point within chroot"
mount "${mount_dir}" ||
    failure "Could not mount project within chroot"

# Also need to mount /proc in since the Ruby build relies on it
debug "mounting /proc into chroot"
pushd "${chroot_dir}"
mount -t proc /proc proc/ ||
    failure "Could not mount /proc within chroot"
popd
