on:
  workflow_call:
    inputs:
      vagrant-artifacts-name:
        description: Name of upload containing Vagrant build artifacts
        required: true
        type: string
      vagrant-artifacts-path:
        description: Path used for Vagrant build artifacts
        required: true
        type: string
      vagrant-gem-name:
        description: Name of upload containing the Vagrant RubyGem
        required: true
        type: string
      vagrant-gem-path:
        description: Path used for the Vagrant RubyGem (directory)
        required: true
        type: string
      vagrant-version:
        description: Version of Vagrant being built
        required: true
        type: string
      vagrant-shasum:
        description: The shasum of the Vagrant RubyGem or commit
        required: true
        type: string
    outputs:
      arch-package-id:
        description: Cache identifier for arch linux package
        value: ${{ jobs.info.outputs.arch-package-id }}
jobs:
  info:
    if: ${{ github.repository == 'hashicorp/vagrant-builders' }}
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    permissions:
      id-token: write
      contents: write
    outputs:
      arch-substrate-id: ${{ steps.inspect.outputs.arch-substrate-id }}
      arch-substrate-exists: ${{ steps.inspect.outputs.arch-substrate-exists }}
      arch-install-id: ${{ steps.inspect.outputs.arch-install-id }}
      arch-install-exists: ${{ steps.inspect.outputs.arch-install-exists }}
      arch-package-id: ${{ steps.inspect.outputs.arch-package-id }}
      arch-package-exists: ${{ steps.inspect.outputs.arch-package-exists }}
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/teams/vagrant/hashibot vagrant_token;
      - name: Code Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Gather information
        id: inspect
        run: ./.ci/arch-build-information
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VAGRANT_SHASUM: ${{ inputs.vagrant-shasum }}
  build-substrate:
    if: ${{ github.repository == 'hashicorp/vagrant-builders' && needs.info.outputs.arch-substrate-exists != 'true' }}
    needs: [info]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Build Launchers
        run: make bin/launcher/linux-x86_64
      - name: Enable LXD
        run: sudo usermod -a -G lxd "${USER}"
      - name: Build Substrate
        run: sg lxd "./.ci/arch-substrate ./substrates"
      - name: Cache Substrate
        run: ./.ci/create-cache "${CACHE_ID}" ./substrates
        env:
          CACHE_ID: ${{ needs.info.outputs.arch-substrate-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  install-vagrant:
    if: ${{ github.repository == 'hashicorp/vagrant-builders' && needs.info.outputs.arch-install-exists != 'true' && !cancelled() && !failure() }}
    needs: [info, build-substrate]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Fetch Substrate
        run: ./.ci/restore-cache "${CACHE_ID}" ./substrates
        env:
          CACHE_ID: ${{ needs.info.outputs.arch-substrate-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch Vagrant RubyGem
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.vagrant-gem-name }}
          path: ${{ inputs.vagrant-gem-path }}
      - name: Enable LXD
        run: sudo usermod -a -G lxd "${USER}"
      - name: Install Vagrant
        run: sg lxd "./.ci/arch-install '${VAGRANT_GEM_PATH}' ./substrates ./artifacts"
        env:
          VAGRANT_GEM_PATH: ${{ inputs.vagrant-gem-path }}
      - name: Cache Install
        run: ./.ci/create-cache "${CACHE_ID}" ./artifacts
        env:
          CACHE_ID: ${{ needs.info.outputs.arch-install-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-packages:
    if: ${{ github.repository == 'hashicorp/vagrant-builders' && needs.info.outputs.arch-package-exists != 'true' && !cancelled() && !failure() }}
    needs: [info, install-vagrant]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Fetch Install
        run: ./.ci/restore-cache "${CACHE_ID}" ./artifacts
        env:
          CACHE_ID: ${{ needs.info.outputs.arch-install-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch Vagrant Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.vagrant-artifacts-name }}
          path: ${{ inputs.vagrant-artifacts-path }}
      - name: Enable LXD
        run: sudo usermod -a -G lxd "${USER}"
      - name: Build package
        run: sg lxd "./.ci/arch-package ./artifacts/vagrant-installed.zip '${VAGRANT_ARTIFACTS}/vagrant-go_linux_amd64' ./pkgs ${VERSION}"
        env:
          VAGRANT_ARTIFACTS: ${{ inputs.vagrant-artifacts-path }}
          VERSION: ${{ inputs.vagrant-version }}
      - name: Cache Package
        run: ./.ci/create-cache "${CACHE_ID}" ./pkgs
        env:
          CACHE_ID: ${{ needs.info.outputs.arch-package-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
