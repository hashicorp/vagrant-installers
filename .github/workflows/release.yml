name: Vagrant HashiCorp Release
on:
  repository_dispatch:
    types:
      - hashicorp-release

jobs:
  vagrant-artifacts:
    if: github.repository == 'hashicorp/vagrant-builders'
    name: Build Core Vagrant Artifacts
    permissions:
      contents: write
    uses: ./.github/workflows/vagrant-artifacts.yml
    with:
      vagrant-commit-id: ${{ github.event.client_payload.commit_id }}
  info:
    if: github.repository == 'hashicorp/vagrant-builders'
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      vagrant-tag: ${{ steps.validate.outputs.vagrant-tag }}
      release-exists: ${{ steps.validate.outputs.release-exists }}
    steps:
      - name: Code Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Validate
        id: validate
        run: |
          . ./.ci/load-ci.sh
          if ! valid_release_version "${VAGRANT_TAG}"; then
            failure "Invalid Vagrant release tag value (%s)" "${VAGRANT_TAG}"
          fi
          printf "vagrant-tag=%s\n" "${VAGRANT_TAG}" >> "${GITHUB_OUTPUT}"
          if hashicorp_releases_exists "vagrant" "${VAGRANT_TAG#v}"; then
            printf "release-exists=true\n" >> "${GITHUB_OUTPUT}"
          fi
        env:
          VAGRANT_TAG: ${{ github.event.client_payload.tag }}
  build-appimage-package:
    if: github.repository == 'hashicorp/vagrant-builders'
    name: Build appimage package
    needs: [info, vagrant-artifacts]
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/build-appimage.yml
    with:
      vagrant-artifacts-name: ${{ needs.vagrant-artifacts.outputs.artifacts-name }}
      vagrant-artifacts-path: ${{ needs.vagrant-artifacts.outputs.artifacts-path }}
      vagrant-gem-name: ${{ needs.vagrant-artifacts.outputs.gem-name }}
      vagrant-gem-path: ${{ needs.vagrant-artifacts.outputs.gem-path }}
      vagrant-version: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
      vagrant-shasum: ${{ needs.vagrant-artifacts.outputs.vagrant-shasum }}
    secrets: inherit
  build-archlinux-package:
    if: github.repository == 'hashicorp/vagrant-builders'
    name: Build Arch Linux Package
    needs: [info, vagrant-artifacts]
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/build-arch.yml
    with:
      vagrant-artifacts-name: ${{ needs.vagrant-artifacts.outputs.artifacts-name }}
      vagrant-artifacts-path: ${{ needs.vagrant-artifacts.outputs.artifacts-path }}
      vagrant-gem-name: ${{ needs.vagrant-artifacts.outputs.gem-name }}
      vagrant-gem-path: ${{ needs.vagrant-artifacts.outputs.gem-path }}
      vagrant-version: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
      vagrant-shasum: ${{ needs.vagrant-artifacts.outputs.vagrant-shasum }}
    secrets: inherit
  build-deb-packages:
    if: github.repository == 'hashicorp/vagrant-builders'
    name: Build deb packages
    needs: [info, vagrant-artifacts]
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/build-debs.yml
    with:
      vagrant-artifacts-name: ${{ needs.vagrant-artifacts.outputs.artifacts-name }}
      vagrant-artifacts-path: ${{ needs.vagrant-artifacts.outputs.artifacts-path }}
      vagrant-gem-name: ${{ needs.vagrant-artifacts.outputs.gem-name }}
      vagrant-gem-path: ${{ needs.vagrant-artifacts.outputs.gem-path }}
      vagrant-version: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
      vagrant-shasum: ${{ needs.vagrant-artifacts.outputs.vagrant-shasum }}
    secrets: inherit
  build-macos-package:
    if: github.repository == 'hashicorp/vagrant-builders'
    name: Build macOS package
    needs: [info, vagrant-artifacts]
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/build-macos.yml
    with:
      vagrant-artifacts-name: ${{ needs.vagrant-artifacts.outputs.artifacts-name }}
      vagrant-artifacts-path: ${{ needs.vagrant-artifacts.outputs.artifacts-path }}
      vagrant-gem-name: ${{ needs.vagrant-artifacts.outputs.gem-name }}
      vagrant-gem-path: ${{ needs.vagrant-artifacts.outputs.gem-path }}
      vagrant-version: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
      vagrant-shasum: ${{ needs.vagrant-artifacts.outputs.vagrant-shasum }}
    secrets: inherit
  build-rpm-packages:
    if: github.repository == 'hashicorp/vagrant-builders'
    name: Build rpm packages
    needs: [info, vagrant-artifacts]
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/build-rpms.yml
    with:
      vagrant-artifacts-name: ${{ needs.vagrant-artifacts.outputs.artifacts-name }}
      vagrant-artifacts-path: ${{ needs.vagrant-artifacts.outputs.artifacts-path }}
      vagrant-gem-name: ${{ needs.vagrant-artifacts.outputs.gem-name }}
      vagrant-gem-path: ${{ needs.vagrant-artifacts.outputs.gem-path }}
      vagrant-version: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
      vagrant-shasum: ${{ needs.vagrant-artifacts.outputs.vagrant-shasum }}
    secrets: inherit
  build-windows-packages:
    if: github.repository == 'hashicorp/vagrant-builders'
    name: Build Windows Packages
    needs: [info, vagrant-artifacts]
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/build-windows.yml
    with:
      vagrant-artifacts-name: ${{ needs.vagrant-artifacts.outputs.artifacts-name }}
      vagrant-artifacts-path: ${{ needs.vagrant-artifacts.outputs.artifacts-path }}
      vagrant-gem-name: ${{ needs.vagrant-artifacts.outputs.gem-name }}
      vagrant-gem-path: ${{ needs.vagrant-artifacts.outputs.gem-path }}
      vagrant-version: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
      vagrant-shasum: ${{ needs.vagrant-artifacts.outputs.vagrant-shasum }}
    secrets: inherit
  release:
    if: github.repository == 'hashicorp/vagrant-builders' && needs.info.outputs.release-exists != 'true'
    name: HashiCorp Release
    needs: [info, vagrant-artifacts, build-appimage-package, build-archlinux-package, build-deb-packages, build-macos-package, build-rpm-packages, build-windows-packages]
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/github/hashicorp/vagrant-builders hashicorp_release_github_token;
            kv/data/github/hashicorp/vagrant-builders releases_api_production_host;
            kv/data/github/hashicorp/vagrant-builders releases_api_production_key;
            kv/data/github/hashicorp/vagrant-builders releases_api_staging_host;
            kv/data/github/hashicorp/vagrant-builders releases_api_staging_key;
            kv/data/github/hashicorp/vagrant-builders signore_client_id;
            kv/data/github/hashicorp/vagrant-builders signore_client_secret;
            kv/data/github/hashicorp/vagrant-builders signore_gpg_signer;
      - name: Code Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Doormat Configuration
        uses: hashicorp/doormat-action@v1
        with:
          aws-role-arn: ${{ vars.RELEASE_ROLE_ARN }}
      - name: Fetch appimage package
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-appimage-package.outputs.appimage-package-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch Arch Linux package
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-archlinux-package.outputs.arch-package-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch deb packages
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-deb-packages.outputs.deb-packages-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch macOS DMG
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-macos-package.outputs.dmg-cache-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch rpm packages
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-rpm-packages.outputs.rpm-packages-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch 32 Bit Windows Package
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-windows-packages.outputs.msi-32-signed-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch 64 Bit Windows Package
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-windows-packages.outputs.msi-64-signed-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update macOS package name
        run: ./.ci/macos-rename-release ./pkg
      - name: Validate package list
        run: ./.ci/validate-package-list ./pkg
      - name: Release Packages
        run: ./.ci/publish-release "${VAGRANT_VERSION}" ./pkg
        env:
          HASHIBOT_TOKEN: ${{ steps.secrets.outputs.hashicorp_release_github_token }}
          VAGRANT_VERSION: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
          SIGNORE_SIGNER: ${{ steps.secrets.outputs.signore_gpg_signer }}
          SIGNORE_CLIENT_ID: ${{ steps.secrets.outputs.signore_client_id  }}
          SIGNORE_CLIENT_SECRET: ${{ steps.secrets.outputs.signore_client_secret }}
          RELEASE_AWS_ACCESS_KEY_ID: ${{ steps.secrets.outputs.releases_aws_access_key_id }}
          RELEASE_AWS_SECRET_ACCESS_KEY: ${{ steps.secrets.outputs.releases_aws_secret_access_key }}
          RELEASE_AWS_ASSUME_ROLE_ARN: ${{ steps.secrets.outputs.releases_aws_role_arn }}
          HC_RELEASES_PROD_SNS_TOPIC: ${{ vars.HASHICORP_RELEASES_SNS_ARN }}
          HC_RELEASES_PROD_HOST: ${{ steps.secrets.outputs.releases_api_production_host }}
          HC_RELEASES_PROD_KEY: ${{ steps.secrets.outputs.releases_api_production_key }}
          HC_RELEASES_STAGING_HOST: ${{ steps.secrets.outputs.releases_api_staging_host }}
          HC_RELEASES_STAGING_KEY: ${{ steps.secrets.outputs.releases_api_staging_key }}
          HASHICORP_PUBLIC_GPG_KEY_ID: ${{ vars.HASHICORP_GPG_SIGNING_ID }}
  post-release-github-release:
    if: github.repository == 'hashicorp/vagrant-builders' && !cancelled() && !failure()
    name: GitHub Release
    needs: [info, vagrant-artifacts, release]
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/teams/vagrant/hashibot signore_token;
            kv/data/teams/vagrant/hashibot vagrant_token;
            kv/data/github/hashicorp/vagrant-builders signore_client_id;
            kv/data/github/hashicorp/vagrant-builders signore_client_secret;
            kv/data/github/hashicorp/vagrant-builders signore_gpg_signer;
      - name: Code Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Fetch Vagrant Build Artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: ${{ needs.vagrant-artifacts.outputs.artifacts-name }}
          path: ${{ needs.vagrant-artifacts.outputs.artifacts-path }}
      - name: Checksum and Sign Vagrant Build Artifacts
        run: ./.ci/generate-sign-build-sum "${VERSION}" "${ARTIFACT_DIR}"
        env:
          ARTIFACT_DIR: ${{ needs.vagrant-artifacts.outputs.artifacts-path }}
          VERSION: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
          GITHUB_TOKEN: ${{ steps.secrets.outputs.signore_token }}
          SIGNORE_SIGNER: ${{ steps.secrets.outputs.signore_gpg_signer }}
          SIGNORE_CLIENT_ID: ${{ steps.secrets.outputs.signore_client_id  }}
          SIGNORE_CLIENT_SECRET: ${{ steps.secrets.outputs.signore_client_secret }}
      - name: Publish GitHub Release
        run: ./.ci/publish-github-release "${TAG_NAME}" "${ARTIFACT_DIR}"
        env:
          ARTIFACT_DIR: ${{ needs.vagrant-artifacts.outputs.artifacts-path }}
          TAG_NAME: ${{ needs.info.outputs.vagrant-tag }}
          GITHUB_TOKEN: ${{ steps.secrets.outputs.vagrant_token }}
  post-release-branches:
    if: github.repository == 'hashicorp/vagrant-builders' && !cancelled() && !failure()
    name: GitHub Branch Updates
    needs: [info, vagrant-artifacts, release]
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/teams/vagrant/hashibot vagrant_token;
      - name: Code Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Vagrant Code Checkout
        uses: actions/checkout@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          repository: hashicorp/vagrant
          path: ./vagrant-source
          token: ${{ steps.secrets.outputs.vagrant_token }}
          fetch-depth: 0
      - name: Publish Documentation Branches
        run: ./.ci/publish-documentation-branches "${TAG_NAME}" "${VERSION}" ./vagrant-source
        env:
          VERSION: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
          TAG_NAME: ${{ needs.info.outputs.vagrant-tag }}
