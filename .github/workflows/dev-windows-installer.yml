name: Vagrant Development Build (MSI)
on:
  repository_dispatch:
    types:
      - build-windows
  push:
    branches:
      - 'build-windows-*'
  workflow_dispatch:

jobs:
  vagrant-artifacts:
    if: github.repository == 'hashicorp/vagrant-builders'
    name: Build Core Vagrant Artifacts
    permissions:
      contents: write
    uses: ./.github/workflows/vagrant-artifacts.yml
    with:
      vagrant-commit-id: ${{ github.event.client_payload.commit_id }}
  info:
    name: Generate Build Information
    if: github.repository == 'hashicorp/vagrant-builders' && github.event.action == 'build-windows'
    needs: [vagrant-artifacts]
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    permissions:
      contents: write
      id-token: write
    outputs:
      release-name: ${{ steps.generate.outputs.release-name }}
      release-exists: ${{ steps.generate.outputs.release-exists }}
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/teams/vagrant/hashibot vagrant_token;
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Generate Development Build Information
        id: generate
        run: ./.ci/dev-build-information "${VAGRANT_VERSION}" "${VAGRANT_SHORT_ID}" "${RUN_NUMBER}"
        env:
          HASHIBOT_TOKEN: ${{ steps.secrets.outputs.vagrant_token }}
          RUN_NUMBER: ${{ github.run_number }}
          VAGRANT_VERSION: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
          VAGRANT_SHORT_ID: ${{ needs.vagrant-artifacts.outputs.vagrant-short-commit-id }}
  build-windows-packages:
    if: github.repository == 'hashicorp/vagrant-builders'
    name: Build Windows Packages
    needs: [vagrant-artifacts]
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/build-windows.yml
    with:
      vagrant-artifacts-name: ${{ needs.vagrant-artifacts.outputs.artifacts-name }}
      vagrant-artifacts-path: ${{ needs.vagrant-artifacts.outputs.artifacts-path }}
      vagrant-gem-name: ${{ needs.vagrant-artifacts.outputs.gem-name }}
      vagrant-gem-path: ${{ needs.vagrant-artifacts.outputs.gem-path }}
      vagrant-version: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
      vagrant-shasum: ${{ needs.vagrant-artifacts.outputs.vagrant-shasum }}
    secrets: inherit
  publish-local:
    if: github.repository == 'hashicorp/vagrant-builders' && github.event.action != 'build-windows'
    needs: [vagrant-artifacts, build-windows-packages]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Fetch 32 Bit Windows Package
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-windows-packages.outputs.msi-32-signed-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch 64 Bit Windows Package
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-windows-packages.outputs.msi-64-signed-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create prerelease
        run: .ci/publish-local-dev-builds "${VAGRANT_VERSION}" ./pkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VAGRANT_VERSION: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
  publish-vagrant:
    if: github.repository == 'hashicorp/vagrant-builders' && github.event.action == 'build-windows'
    needs: [vagrant-artifacts, info, build-windows-packages]
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/teams/vagrant/hashibot vagrant_token;
            kv/data/teams/vagrant/hashibot signore_token;
            kv/data/github/hashicorp/vagrant-builders signore_client_id;
            kv/data/github/hashicorp/vagrant-builders signore_client_secret;
            kv/data/github/hashicorp/vagrant-builders signore_gpg_signer;
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Fetch 32 Bit Windows Package
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-windows-packages.outputs.msi-32-signed-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch 64 Bit Windows Package
        run: ./.ci/restore-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.build-windows-packages.outputs.msi-64-signed-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate shasums
        run: ./.ci/dev-builds-shasums ./pkg "${VAGRANT_VERSION}"
        env:
          SIGNORE_CLIENT_ID: ${{ steps.secrets.outputs.signore_client_id }}
          SIGNORE_CLIENT_SECRET: ${{ steps.secrets.outputs.signore_client_SECRET }}
          SIGNORE_SIGNER: ${{ steps.secrets.outputs.signore_gpg_signer }}
          HASHIBOT_TOKEN: ${{ steps.secrets.outputs.signore_token }}
          VAGRANT_VERSION: ${{ needs.vagrant-artifacts.outputs.vagrant-version }}
      - name: Publish Dev Build
        run: ./.ci/publish-dev-builds "${RELEASE_NAME}" "${COMMIT_ID:-main}" "${BRANCH:-main}" "${RELEASE_TYPE}" ./pkg
        env:
          COMMIT_ID: ${{ needs.vagrant-artifacts.outputs.vagrant-commit-id }}
          BRANCH: ${{ github.event.client_payload.branch }}
          RELEASE_NAME: ${{ needs.info.outputs.release-name }}
          RELEASE_TYPE: ${{ github.event.action }}
          HASHIBOT_TOKEN: ${{ steps.secrets.outputs.vagrant_token }}
